package com.yeqing.interceptor;

import java.lang.reflect.Method;

import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodInterceptor;
import org.springframework.cglib.proxy.MethodProxy;

import com.yeqing.log.LogUtil;

@SuppressWarnings("all")
public class LogAdvice implements MethodInterceptor {

	private Object target;
	private LogUtil logUtil;
	
	public void setTarget(Object target) {
		this.target = target;
	}
	
	public void setLogUtil(LogUtil logUtil) {
		this.logUtil = logUtil;
	}

	public <T> T getProxyObject() {
		return (T) Enhancer.create(target.getClass(), this);  //使用Enhancer的静态方法，创建一个代理对象
	}
    //拦截真实对象中的方法调用，对方法调用做前置增强（记录日志）
	public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
		logUtil.writeLog(method.getDeclaringClass().getName(), method.getName());  //记录日志
		return method.invoke(target, args);  //放行
	}

}
